from typing import TYPE_CHECKING

import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM
from sqlalchemy.orm import relationship

from app.config import Config
from app.database.models.base import TimedBaseModel
from app.database.services.enums import UserStatusEnum, UserTypeEnum

if TYPE_CHECKING:
    from app.database.models import Setting


class User(TimedBaseModel):
    user_id = sa.Column(sa.BIGINT, primary_key=True, autoincrement=False, index=True)
    commission_id = sa.Column(sa.BIGINT, nullable=False, default=1)
    full_name = sa.Column(sa.VARCHAR(255), nullable=False)
    inn = sa.Column(sa.BIGINT, nullable=True)
    mention = sa.Column(sa.VARCHAR(300), nullable=False)
    status = sa.Column(ENUM(UserStatusEnum), default=UserStatusEnum.ACTIVE, nullable=False)
    type = sa.Column(ENUM(UserTypeEnum), default=UserTypeEnum.USER, nullable=False)
    balance = sa.Column(sa.BIGINT, default=0, nullable=False)
    bankcard = sa.Column(sa.VARCHAR(16), nullable=True)
    description = sa.Column(sa.VARCHAR(500), nullable=True)
    ban_comment = sa.Column(sa.VARCHAR(500), nullable=True)
    time = sa.Column(sa.VARCHAR(10), nullable=False, default='*')

    async def construct_admin_info(self, deal_db):
        rating, evaluated, deals = await deal_db.calculate_user_rating(self.user_id)
        return (
            f'–†–µ–π—Ç–∏–Ω–≥: {rating} {self.emojize_rating_text(rating)}\n'
            f'–°—Ç–∞—Ç—É—Å: {self.construct_user_status()}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–≥–æ–¥: {deals}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–µ–Ω–∏—Ö —É–≥–æ–¥: {evaluated}'
        )

    async def construct_preview_text(self, deal_db):
        rating, evaluated, deals = await deal_db.calculate_user_rating(self.user_id)
        text = (
            f'üì¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {self.full_name} –ø–æ–¥–∞–≤ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è '
            f'–≤–∞—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è\n\n'
            f'–†–µ–π—Ç–∏–Ω–≥: {rating} {self.emojize_rating_text(rating)}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–≥–æ–¥: {deals}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–µ–Ω–∏—Ö —É–≥–æ–¥: {evaluated}'
        )
        if self.description:
            text += f'\n–ü—Ä–æ —Å–µ–±–µ: {self.description if self.description else "–ù–µ–º–∞—î –æ–ø–∏—Å—É"}'
        return text

    async def construct_my_rating(self, deal_db):
        rating, evaluated, deals = await deal_db.calculate_user_rating(self.user_id)
        text = (
            f'–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating} {self.emojize_rating_text(rating)}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—à–∏—Ö –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —É–≥–æ–¥: {deals}\n'
            f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥ —è–∫—ñ –æ—Ü—ñ–Ω–∏–ª–∏: {evaluated}\n\n'
            f'üí¨ –ü—Ä–æ —Å–µ–±–µ: '
        )
        if self.description:
            text += f'\n\n<pre>{self.description}</pre>' + '\n\n'
        else:
            text += '–î–æ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å, —è–∫–∏–π –∑–∞–º–æ–≤–Ω–∏–∫ –ø–æ–±–∞—á–∏—Ç—å —É —Ç–≤–æ—î–º—É –∑–∞–ø–∏—Ç—ñ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.\n\n'
        text += f'‚Ñπ –†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Ö—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Ü—ñ–Ω–µ–Ω–∏—Ö —É–≥–æ–¥. –ù–µ–æ—Ü—ñ–Ω–µ–Ω—ñ —É–≥–æ–¥–∏ –Ω–µ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥.\n\n'
        return text

    def construct_user_status(self):
        if self.status == UserStatusEnum.ACTIVE:
            return '–ê–∫—Ç–∏–≤–Ω–∏–π'
        elif self.status == UserStatusEnum.BANNED:
            return '–ó–∞–±–∞–Ω–µ–Ω–∏–π'

    @staticmethod
    def emojize_rating_text(rating: int) -> str:
        return '‚≠ê' * int(rating)

    def create_html_link(self, text: str):
        return f'<a href="tg://user?id={self.user_id}">{text}</a>'

    def server_url(self):
        config = Config.from_env()
        return config.django.model_link('user', self.user_id)