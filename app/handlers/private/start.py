import re
from datetime import timedelta, datetime

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, ChatTypeFilter, Command
from aiogram.types import Message, ChatType, ChatActions
from aiogram.utils.markdown import hide_link

from app.config import Config
from app.database.services.enums import DealStatusEnum, UserTypeEnum, RoomStatusEnum
from app.database.services.repos import DealRepo, PostRepo, UserRepo, RoomRepo
from app.filters import IsAdminFilter
from app.handlers.userbot import UserbotController
from app.keyboards import Buttons
from app.keyboards.inline.admin import manage_post_kb
from app.keyboards.inline.deal import send_deal_kb, add_admin_chat_kb, join_room_kb
from app.keyboards.reply.menu import menu_kb
from app.misc.commands import set_new_room_commands
from app.states.states import ParticipateSG

PARTICIPATE_REGEX = re.compile(r'participate-(\d+)')
ADMIN_HELP_REGEX = re.compile(r'helpdeal-(\d+)')
MANAGE_POST_REGEX = re.compile(r'manage_post-(\d+)')
PRIVATE_DEAL_REGEX = re.compile(r'private_deal-(\d+)')

greeting_text = (
        '–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ –ê –®–û –¢–ê–ú?\n\n'
        '–í –Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —á–∞—Ç—É —É –í–∞—Å —î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º üëá\n\n'
        '<b>–ù–æ–≤–∏–π –ø–æ—Å—Ç ‚ûï</b> - –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n'
        '<b>–ú–æ—ó –ø–æ—Å—Ç–∏ üìë</b> -  –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n'
        '<b>–ú–æ—ó –∫–æ—à—Ç–∏ üí∏</b> - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É.\n'
        '<b>–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê</b> - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É —Å–µ—Ä–≤—ñ—Å—ñ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –ø—Ä–æ —Å–µ–±–µ.\n'
        '<b>–ú–æ—ó —á–∞—Ç–∏ üí¨</b> -  –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏.\n'
        '<b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è üîî</b> -  –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n\n'
        '–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–µ–∫–ª–∞–º–∏, —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∞–±–æ –±—É–¥—å-—è–∫–∏—Ö —ñ–Ω—à–∏—Ö –ø–∏—Ç–∞–Ω—å, '
        '–∞ —Ç–∞–∫–æ–∂ —ñ–¥–µ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é '
        '–Ω–∞–ø–∏—Å–∞–≤—à–∏ —Å—é–¥–∏ @AShoTam_Bot'
    )


async def start_cmd(msg: Message, state: FSMContext, user_db: UserRepo):
    if not msg.from_user.is_bot:
        user = await user_db.get_user(msg.from_user.id)
        await msg.answer(greeting_text if msg.text != Buttons.menu.back else '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
                         reply_markup=menu_kb(admin=user.type == UserTypeEnum.ADMIN))
    else:
        await msg.answer(greeting_text, reply_markup=menu_kb())
        await state.finish()

async def cancel_action_cmd(msg: Message, user_db: UserRepo, state: FSMContext):
    await state.finish()
    user = await user_db.get_user(msg.from_user.id)
    await msg.answer('–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –¥—ñ—é', reply_markup=menu_kb(admin=user.type == UserTypeEnum.ADMIN))

async def participate_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, post_db: PostRepo,
                          state: FSMContext):
    await msg.delete()
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    if not deal:
        await msg.answer('–°—Ö–æ–∂–µ —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞')
        return
    post = await post_db.get_post(deal.post_id)
    if deal.status != DealStatusEnum.ACTIVE:
        await msg.answer('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è')
        return
    elif deal.customer_id == msg.from_user.id:
        await msg.answer('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ —Å–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è')
        return
    elif msg.from_user.id in deal.willing_ids:
        await msg.answer('–í–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è')
        return
    text = (
        f'–í–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è.\n\n'
        f'–î–ª—è —Ü—å–æ–≥–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∑–∞–º–æ–≤–Ω–∏–∫ —É –í–∞—à–æ–º—É –∑–∞–ø–∏—Ç—ñ, —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '
        f'"{Buttons.post.send_deal}". –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ü—é –∫–Ω–æ–ø–∫—É, —è–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.\n\n'
        f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†–æ–∑–∫–∞–∂—ñ—Ç—å —á–æ–º—É –∑–∞–º–æ–≤–Ω–∏–∫ –º–∞—î –æ–±—Ä–∞—Ç–∏ —Å–∞–º–µ –≤–∞—Å.'
        f'{hide_link(post.post_url)}'
    )
    await msg.answer(text, reply_markup=send_deal_kb(deal, msg.from_user.id))
    await ParticipateSG.Comment.set()
    await state.update_data(deal_id=deal_id, comment=False)


async def admin_help_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, post_db: PostRepo,
                         user_db: UserRepo, room_db: RoomRepo, config: Config):
    await msg.delete()
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    if not deal.chat_id:
        await msg.answer('–°—Ö–æ–∂–µ —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞')
        return
    post = await post_db.get_post(deal.post_id)
    room = await room_db.get_room(deal.chat_id)
    admin = await user_db.get_user(msg.from_user.id)
    customer = await user_db.get_user(deal.customer_id)
    executor = await user_db.get_user(deal.executor_id)
    text_to_admin = (
        f'–í–∏ —Ö–æ—á–µ—Ç–µ —É–≤—ñ–π—Ç–∏ —è–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É {room.name}\n\n'
        f'–ü–æ—Å—Ç: {post.construct_html_link(post.title)}\n'
        f'–ó–∞–º–æ–≤–Ω–∏–∫: {customer.mention}\n'
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {executor.mention}\n'
        f'–¶—ñ–Ω–∞ —É–≥–æ–¥–∏: {deal.construct_price()}\n'
        f'–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {deal.chat_status()}\n\n'
    )
    text_to_channel = await room.construct_admin_moderate_text(room_db, msg.bot, config, admin)
    message = await msg.bot.edit_message_text(text_to_channel, config.misc.admin_channel_id, room.message_id)
    await room_db.update_room(deal.chat_id, admin_id=admin.user_id, message_id=message.message_id)
    await msg.answer(text_to_admin, reply_markup=add_admin_chat_kb(deal, admin))


async def manage_post_cmd(msg: Message, deep_link: re.Match, post_db: PostRepo,
                          user_db: UserRepo, room_db: RoomRepo, deal_db: DealRepo):
    await msg.delete()
    post_id = int(deep_link.groups()[-1])
    post = await post_db.get_post(post_id)
    text = (
        f'{post.construct_post_text(use_bot_link=False)}\n\n'
    )
    if post.status == DealStatusEnum.DONE:
        deal = await deal_db.get_deal_post(post_id)
        room = await room_db.get_room(deal.chat_id)
        text += f'üÜî #–£–≥–æ–¥–∞_–Ω–æ–º–µ—Ä_{deal.deal_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ {room.construct_html_text(room.name)}'
    elif post.status == DealStatusEnum.BUSY:
        deal = await deal_db.get_deal_post(post_id)
        customer = await user_db.get_user(deal.customer_id)
        executor = await user_db.get_user(deal.executor_id)
        text += f'<b>–£–≥–æ–¥–∞ —É–∫–ª–∞–¥–µ–Ω–∞ –º—ñ–∂:</b> {customer.mention} (–ó–∞–º–æ–≤–Ω–∏–∫) —Ç–∞ {executor.mention} (–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å)'
    await msg.answer(text, reply_markup=manage_post_kb(post))


async def confirm_private_deal_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, room_db: RoomRepo,
                                   userbot: UserbotController):
    await msg.delete()
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    if deal.status == DealStatusEnum.BUSY or all([deal.customer_id, deal.executor_id]):
        await msg.answer('–£–ø—Å, —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ —ó—ó —É—á–∞—Å–Ω–∏–∫–æ–º')
        return
    elif deal.customer_id == msg.from_user.id or deal.executor_id == msg.from_user.id:
        await msg.answer('–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å–Ω–∏–∫–æ–º –≤ —Å–≤–æ—ó–π —É–≥–æ–¥—ñ')
        return
    await msg.answer('üéâ –í—ñ—Ç–∞—î–º–æ. –í–∏ —Å—Ç–∞–ª–∏ 2-–∏–º —É—á–∞—Å–Ω–∏–∫–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó —É–≥–æ–¥–∏')
    role = 'customer_id' if deal.executor_id else 'executor_id'
    room_chat_id, invite_link = await get_room(msg, room_db, userbot)
    await deal_db.update_deal(
        deal_id, chat_id=room_chat_id, **{role: msg.from_user.id},
        next_activity_date=datetime.now() + timedelta(minutes=1)
    )
    text = (
        f'–ü—Ä–∏–≤–∞—Ç–Ω–∞ —É–≥–æ–¥–∞ –∑ {msg.from_user.full_name} —É—Ö–≤–∞–ª–µ–Ω–∞. –ó–∞—Ö–æ–¥—å—Ç–µ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n\n'
        f'{invite_link}\n\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ü–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º'
    )
    deal = await deal_db.get_deal(deal_id)
    await msg.bot.send_message(
        deal.customer_id, text=text, reply_markup=join_room_kb(invite_link), disable_web_page_preview=True)
    await msg.bot.send_message(
        deal.executor_id, text=text, reply_markup=join_room_kb(invite_link), disable_web_page_preview=True)


def setup(dp: Dispatcher):
    dp.register_message_handler(
        participate_cmd, ChatTypeFilter(ChatType.PRIVATE), CommandStart(PARTICIPATE_REGEX), state='*')
    dp.register_message_handler(
        admin_help_cmd, IsAdminFilter(), ChatTypeFilter(ChatType.PRIVATE), CommandStart(ADMIN_HELP_REGEX), state='*')
    dp.register_message_handler(
        manage_post_cmd, IsAdminFilter(), ChatTypeFilter(ChatType.PRIVATE), CommandStart(MANAGE_POST_REGEX), state='*')
    dp.register_message_handler(
        confirm_private_deal_cmd, ChatTypeFilter(ChatType.PRIVATE), CommandStart(PRIVATE_DEAL_REGEX), state='*')
    dp.register_message_handler(cancel_action_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.action.cancel,
                                state='*')
    dp.register_message_handler(start_cmd, CommandStart(), ChatTypeFilter(ChatType.PRIVATE), state='*')
    dp.register_message_handler(start_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.admin.menu, state='*')
    dp.register_message_handler(start_cmd, Command('menu'), ChatTypeFilter(ChatType.PRIVATE), state='*')
    dp.register_message_handler(start_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.back, state='*')


async def get_room(msg: Message, room_db: RoomRepo, userbot: UserbotController) -> tuple[int, str]:
    room = await room_db.get_free_room()
    await msg.answer('–û—á—ñ–∫—É–π—Ç–µ, –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è –≤–∞—Å –∫—ñ–º–Ω–∞—Ç—É...')
    if room is None:
        await msg.bot.send_chat_action(msg.from_user.id, ChatActions.FIND_LOCATION)
        quantity_of_rooms = await room_db.count()
        chat, invite_link, name = await userbot.create_new_room(quantity_of_rooms)
        await room_db.add(chat_id=chat.id, invite_link=invite_link.invite_link, status=RoomStatusEnum.BUSY, name=name)
        await set_new_room_commands(msg.bot, chat.id, await userbot.get_client_user_id())
        chat_id = chat.id
        invite_link = invite_link.invite_link
    else:
        await msg.bot.send_chat_action(msg.from_user.id, ChatActions.FIND_LOCATION)
        await room_db.update_room(room.chat_id, status=RoomStatusEnum.BUSY)
        chat_id = room.chat_id
        invite_link = room.invite_link
    return chat_id, invite_link
