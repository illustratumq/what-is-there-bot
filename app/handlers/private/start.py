import re
from datetime import timedelta, datetime

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, ChatTypeFilter, Command
from aiogram.types import Message, ChatType
from aiogram.utils.markdown import hide_link

from app.config import Config
from app.database.services.enums import DealStatusEnum, UserTypeEnum, JoinStatusEnum, OrderTypeEnum
from app.database.services.repos import DealRepo, PostRepo, UserRepo, RoomRepo, LetterRepo, JoinRepo, OrderRepo, \
    MerchantRepo, AdminSettingRepo
from app.filters import IsAdminFilter
from app.fondy.new_api import FondyApiWrapper
from app.handlers.private.room import get_room
from app.handlers.userbot import UserbotController
from app.keyboards import Buttons
from app.keyboards.inline.admin import manage_post_kb
from app.keyboards.inline.deal import send_deal_kb, add_admin_chat_kb, join_room_kb, to_bot_kb
from app.keyboards.reply.menu import menu_kb
from app.states.states import ParticipateSG

PARTICIPATE_REGEX = re.compile(r'participate-(\d+)')
ADMIN_HELP_REGEX = re.compile(r'helpdeal-(\d+)')
MANAGE_POST_REGEX = re.compile(r'manage_post-(\d+)')
PRIVATE_DEAL_REGEX = re.compile(r'private_deal-(\d+)')
PAY_DEAL_REGEX = re.compile(r'pay_deal-(\d+)')


greeting_text = (
    '–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ ENTER\n\n'
    '–í –Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —á–∞—Ç—É —É –í–∞—Å —î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º üëá\n\n'
    '<b>–ù–æ–≤–∏–π –ø–æ—Å—Ç ‚ûï</b> - –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n'
    '<b>–ú–æ—ó –ø–æ—Å—Ç–∏ üìë</b> -  –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –ø–æ—Å—Ç–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n'
    '<b>–ú–æ—ó –∫–æ—à—Ç–∏ üí∏</b> - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏ –∑ —Ä–∞—Ö—É–Ω–∫—É.\n'
    '<b>–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠ê</b> - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É —Å–µ—Ä–≤—ñ—Å—ñ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –ø—Ä–æ —Å–µ–±–µ.\n'
    '<b>–ú–æ—ó —á–∞—Ç–∏ üí¨</b> -  –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏.\n'
    '<b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è üîî</b> -  –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ.\n\n'
    '–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–µ–∫–ª–∞–º–∏, —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∞–±–æ –±—É–¥—å-—è–∫–∏—Ö —ñ–Ω—à–∏—Ö –ø–∏—Ç–∞–Ω—å, '
    '–∞ —Ç–∞–∫–æ–∂ —ñ–¥–µ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é '
    '–Ω–∞–ø–∏—Å–∞–≤—à–∏ —Å—é–¥–∏ @{}'
)


async def start_cmd(msg: Message, state: FSMContext, user_db: UserRepo, letter_db: LetterRepo):
    bot = (await msg.bot.me).username
    if not msg.from_user.is_bot:
        new_letters = await letter_db.get_new_letters_user(msg.from_user.id)
        user = await user_db.get_user(msg.from_user.id)
        text = greeting_text.format('ENTER_help') if msg.text != Buttons.menu.back else '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'
        await msg.answer(text, reply_markup=menu_kb(admin=user.type == UserTypeEnum.ADMIN,
                                                    letters=bool(new_letters)))
    else:
        await msg.answer(greeting_text.format(bot), reply_markup=menu_kb())
    await state.finish()


async def cancel_action_cmd(msg: Message, user_db: UserRepo, state: FSMContext):
    await state.finish()
    user = await user_db.get_user(msg.from_user.id)
    await msg.answer('–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –¥—ñ—é', reply_markup=menu_kb(admin=user.type == UserTypeEnum.ADMIN))


async def participate_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, user_db: UserRepo, post_db: PostRepo,
                          join_db: JoinRepo, state: FSMContext, admin_setting_db: AdminSettingRepo):
    await msg.delete()
    deals = await deal_db.get_deal_executor(msg.from_user.id, DealStatusEnum.DONE)
    setting = await admin_setting_db.get_setting(1)
    if setting.setting_status and not deals:
        await msg.answer(
            '–ù–∞—Ä–∞–∑—ñ –º–∏ –ø—Ä–∏–∑—É–ø–∏–Ω—è—î–º–æ –ø–æ–¥–∞—á—É –∑–∞—è–≤ –Ω–∞ —É—á–∞—Å—Ç—å –≤ —É–≥–æ–¥–∞—Ö –Ω–∞ –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω. \n\n'
            '–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!'
        )
        return
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    post = await post_db.get_post(deal.post_id)
    user = await user_db.get_user(msg.from_user.id)
    join = await join_db.get_post_join(deal.customer_id, msg.from_user.id, post.post_id)
    if join and join.status == JoinStatusEnum.USED:
        await join_db.delete_join(join.join_id)
        join = None
    delete = False
    one_time_join = False
    if not deal:
        text = (
            f'<b>–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n'
            f'–°—Ö–æ–∂–µ —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞'
        )
        delete = True
        one_time_join = True
    elif user.type == UserTypeEnum.ADMIN:
        await manage_post_cmd(msg, f'{deal.deal_id}', post_db, user_db, deal_db)
        return
    elif deal.status != DealStatusEnum.ACTIVE:
        text = (
             f'<b>–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n'
             f'–¢–∏ –Ω–µ –º–æ–∂–µ—à –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–æ –≤–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–µ'
        )
        delete = True
        one_time_join = True
    elif deal.customer_id == msg.from_user.id:
        text = '–¢–∏ –Ω–µ –º–æ–∂–µ—à –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ —Å–≤–æ–≥–æ –∂ –∑–∞–≤–¥–∞–Ω–Ω—è'
        delete = True
        one_time_join = True
    elif join and join.status == JoinStatusEnum.EDIT and join.comment:
        text = (
            f'<b>–¢–∏ —Ö–æ—á–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è?</b>\n\n'
            f'–Ø –∑–±–µ—Ä—ñ–≥ —Ç–≤—ñ–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä. –Ø–∫—â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ, –≤—ñ–¥–ø—Ä–∞–≤ –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∑–Ω–æ–≤—É.\n\n'
            f'–¢–≤—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä: <i>{join.comment}</i>'
        )
    elif join and join.status == JoinStatusEnum.ACTIVE:
        text = (
            f'<b>–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n'
            f'–¢–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –í —Ä–∞–∑—ñ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–º–æ–≤–∏ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.'
        )
        delete = True
    elif join and join.status == JoinStatusEnum.DISABLE:
        text = (
            f'<b>–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n\n'
            f'–ó–∞–º–æ–≤–Ω–∏–∫ –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è'
        )
        delete = True
    else:
        text = (
            f'<b>–¢–∏ —Ö–æ—á–µ—à —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –∑–∞–≤–¥–∞–Ω–Ω—è?</b>\n\n'
            f'–î–ª—è —Ü—å–æ–≥–æ, –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∑–∞–º–æ–≤–Ω–∏–∫ —É –¢–≤–æ—î–º—É –∑–∞–ø–∏—Ç—ñ, —ñ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '
            f'"{Buttons.post.send_deal}" (—Ç–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è).\n\n'
            f'<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è</i>: –†–æ–∑–∫–∞–∂—ñ—Ç—å —á–æ–º—É –∑–∞–º–æ–≤–Ω–∏–∫ –º–∞—î –æ–±—Ä–∞—Ç–∏ —Å–∞–º–µ —Ç–µ–±–µ.'
        )
    if not join:
        join = await join_db.add(deal_id=deal_id, post_id=post.post_id, customer_id=post.user_id,
                                 executor_id=msg.from_user.id, one_time_join=one_time_join)
    join_msg = await msg.answer(text, reply_markup=send_deal_kb(join, delete))
    await join_db.update_join(join.join_id, join_msg_id=join_msg.message_id)
    await ParticipateSG.Comment.set()
    await state.update_data(join_id=join.join_id)


async def admin_help_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, post_db: PostRepo,
                         user_db: UserRepo, room_db: RoomRepo, config: Config):
    await msg.delete()
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    if not deal.chat_id:
        await msg.answer('–°—Ö–æ–∂–µ —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞')
        return
    post = await post_db.get_post(deal.post_id)
    room = await room_db.get_room(deal.chat_id)
    admin = await user_db.get_user(msg.from_user.id)
    customer = await user_db.get_user(deal.customer_id)
    executor = await user_db.get_user(deal.executor_id)
    text_to_admin = (
        f'–í–∏ —Ö–æ—á–µ—Ç–µ —É–≤—ñ–π—Ç–∏ —è–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É {room.name}\n\n'
        f'–ü–æ—Å—Ç: {post.construct_html_link(post.title)}\n'
        f'–ó–∞–º–æ–≤–Ω–∏–∫: {customer.mention}\n'
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {executor.mention}\n'
        f'–¶—ñ–Ω–∞ —É–≥–æ–¥–∏: {deal.deal_price}\n'
        f'–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: {deal.chat_status}\n\n'
    )
    text_to_channel = await room.construct_admin_moderate_text(room_db, msg.bot, config, admin)
    message = await msg.bot.edit_message_text(text_to_channel, config.misc.admin_help_channel_id, room.message_id)
    await room_db.update_room(deal.chat_id, admin_id=admin.user_id, message_id=message.message_id)
    await msg.answer(text_to_admin, reply_markup=add_admin_chat_kb(deal, admin))


async def manage_post_cmd(msg: Message, deep_link: re.Match | str, post_db: PostRepo,
                          user_db: UserRepo, deal_db: DealRepo):
    post_id = int(deep_link.groups()[-1]) if isinstance(deep_link, re.Match) else int(deep_link)
    post = await post_db.get_post(post_id)
    text = (
        f'{post.construct_post_text(use_bot_link=False)}\n\n'
    )
    deal = await deal_db.get_deal_post(post_id)
    if post.status == DealStatusEnum.DONE:
        text += f'üÜî #–£–≥–æ–¥–∞_–Ω–æ–º–µ—Ä_{deal.deal_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å'
    elif post.status == DealStatusEnum.BUSY:
        customer = await user_db.get_user(deal.customer_id)
        executor = await user_db.get_user(deal.executor_id)
        text += f'<b>–£–≥–æ–¥–∞ —É–∫–ª–∞–¥–µ–Ω–∞ –º—ñ–∂:</b> {customer.mention} (–ó–∞–º–æ–≤–Ω–∏–∫) —Ç–∞ {executor.mention} (–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å)'
    await msg.answer(text, reply_markup=manage_post_kb(post, deal))


async def confirm_private_deal_cmd(msg: Message, deep_link: re.Match, deal_db: DealRepo, room_db: RoomRepo,
                                   userbot: UserbotController, user_db: UserRepo, state: FSMContext):
    await msg.delete()
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    if deal.status == DealStatusEnum.BUSY or all([deal.customer_id, deal.executor_id]):
        await msg.answer('–£–ø—Å, —Ü—è —É–≥–æ–¥–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞. –¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ —ó—ó —É—á–∞—Å–Ω–∏–∫–æ–º')
        return
    elif deal.customer_id == msg.from_user.id or deal.executor_id == msg.from_user.id:
        await msg.answer('–¢–∏ –Ω–µ –º–æ–∂–µ—à —Å—Ç–∞—Ç–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å–Ω–∏–∫–æ–º –≤ —Å–≤–æ—ó–π —É–≥–æ–¥—ñ')
        return
    await msg.answer('üéâ –í—ñ—Ç–∞—î–º–æ. –í–∏ —Å—Ç–∞–ª–∏ 2-–∏–º —É—á–∞—Å–Ω–∏–∫–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó —É–≥–æ–¥–∏')
    role = 'customer_id' if deal.executor_id else 'executor_id'
    room_chat_id, invite_link = await get_room(msg, msg.from_user.id, room_db, userbot)
    await deal_db.update_deal(
        deal_id, chat_id=room_chat_id, **{role: msg.from_user.id},
        next_activity_date=datetime.now() + timedelta(minutes=1), status=DealStatusEnum.BUSY
    )
    text = (
        '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —É–≥–æ–¥–∞ –∑ {} —É—Ö–≤–∞–ª–µ–Ω–∞. –ó–∞—Ö–æ–¥—å—Ç–µ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n\n'
        f'{invite_link}\n\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ü–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º'
    )
    deal = await deal_db.get_deal(deal_id)
    customer = await user_db.get_user(deal.customer_id)
    executor = await user_db.get_user(deal.executor_id)
    customer_msg = await msg.bot.send_message(deal.customer_id, text=text.format(executor.full_name),
                                              reply_markup=join_room_kb(invite_link), disable_web_page_preview=True)
    executor_msg = await msg.bot.send_message(deal.executor_id, text=text.format(customer.full_name),
                                              reply_markup=join_room_kb(invite_link), disable_web_page_preview=True)
    await state.storage.update_data(
        chat=room_chat_id, user=deal.executor_id, last_msg_id=executor_msg.message_id)
    await state.storage.update_data(
        chat=room_chat_id, user=deal.customer_id, last_msg_id=customer_msg.message_id)


async def pay_deal_customer_chat(msg: Message, deep_link: re.Match, deal_db: DealRepo, user_db: UserRepo,
                                 order_db: OrderRepo, post_db: PostRepo, merchant_db: MerchantRepo,
                                 fondy: FondyApiWrapper, config: Config):
    deal_id = int(deep_link.groups()[-1])
    deal = await deal_db.get_deal(deal_id)
    post = await post_db.get_post(deal.post_id)
    customer = await user_db.get_user(deal.customer_id)

    if msg.from_user.id != customer.user_id:
        await msg.answer('–í–∏ –Ω–µ —î –∑–∞–º–æ–≤–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è')
        return

    deal = await deal_db.get_deal(deal_id)
    customer = await user_db.get_user(deal.customer_id)
    need_to_pay = deal.price - deal.payed
    orders = await order_db.get_orders_deal(deal_id, OrderTypeEnum.ORDER)
    order = None
    merchant = None
    url = None

    if orders:
        for order in orders:
            if order.request_answer:
                order = order
                if 'error_message' in order.request_answer['response'].keys():
                    pass
                elif order.request_answer['response']['order_status'] == 'created':
                    merchant = await merchant_db.get_merchant(order.merchant_id)
                    order_status = (await fondy.check_order(order, merchant))['response']['order_status']
                    if order_status == 'created':
                        if int(order.request_body['amount']/100) != need_to_pay:
                            await order_db.delete_order(order.id)
                        else:
                            url = order.url
                    elif order_status == 'approved':
                        text = (
                            f'üßæ –í–∞—à —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É —É–≥–æ–¥–∏\n\n'
                            f'<b>–ù–∞–≤–∑–∞ —É–≥–æ–¥–∏</b>: {post.title}\n'
                            f'<b>ID —É–≥–æ–¥–∏</b>: {deal.deal_id}\n'
                            f'<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É</b>: –°–ø–ª–∞—á–µ–Ω–æ ‚úÖ'
                        )
                        await msg.answer(text, reply_markup=to_bot_kb(url=order.url, text='üí≥ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ –ø–ª–∞—Ç–µ–∂—É'))
                        return
    if not url:
        response, order = await fondy.create_order(deal, need_to_pay, customer.inn)
        merchant = await merchant_db.get_merchant(order.merchant_id)
        if response['response']['response_status'] != 'success':
            await msg.answer('–£–ø—Å.. –í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–ø–ª–∞—Ç–æ—é —É–≥–æ–¥–∏. –ú–∏ –≤–∂–µ –≤–∏—Ä—ñ—à—É—î–º–æ —Ü—é –ø—Ä–æ–±–ª–µ–º—É!')
            await msg.bot.send_message(config.misc.admin_help_channel_id,
                                       f'üî¥ <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–æ—Ä–≤–µ–Ω–Ω—ñ –ª—ñ–Ω–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É {deal.deal_id=}</b>\n'
                                       f'\n{response}')
            return
        url = response['response']['checkout_url']
        await order_db.update_order(order.id, url=url)

    text = (
        f'üßæ –í–∞—à —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É —É–≥–æ–¥–∏\n\n'
        f'<b>–ù–∞–≤–∑–∞ —É–≥–æ–¥–∏</b>: {post.title}\n'
        f'<b>ID —É–≥–æ–¥–∏</b>: {deal.deal_id}\n'
        f'<b>–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏</b>: {need_to_pay} –≥—Ä–Ω. + –∫–æ–º—ñ—Å—ñ—è\n\n'
        f'–ü—Ä–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 30 –≥—Ä–Ω –¥–æ 99 –≥—Ä–Ω - 10%\n'
        f'–ü—Ä–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 100 –≥—Ä–Ω –¥–æ 201 –≥—Ä–Ω - 7%\n'
        f'–ü—Ä–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 202 –≥—Ä–Ω —ñ –≤–∏—â–µ –≥—Ä–Ω - 5%\n\n'
        f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å —É–≥–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É {hide_link(url)}'
    )
    await msg.answer(text, reply_markup=to_bot_kb(url=url, text='üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ —É–≥–æ–¥—É'))


def setup(dp: Dispatcher):
    dp.register_message_handler(
        participate_cmd, ChatTypeFilter(ChatType.PRIVATE), CommandStart(PARTICIPATE_REGEX), state='*')
    dp.register_message_handler(
        admin_help_cmd, IsAdminFilter(), ChatTypeFilter(ChatType.PRIVATE), CommandStart(ADMIN_HELP_REGEX), state='*')
    dp.register_message_handler(
        manage_post_cmd, IsAdminFilter(), ChatTypeFilter(ChatType.PRIVATE), CommandStart(MANAGE_POST_REGEX), state='*')
    dp.register_message_handler(
        pay_deal_customer_chat, ChatTypeFilter(ChatType.PRIVATE), CommandStart(PAY_DEAL_REGEX), state='*'
    )
    dp.register_message_handler(
        confirm_private_deal_cmd, ChatTypeFilter(ChatType.PRIVATE), CommandStart(PRIVATE_DEAL_REGEX), state='*')
    dp.register_message_handler(cancel_action_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.action.cancel,
                                state='*')
    dp.register_message_handler(start_cmd, CommandStart(), ChatTypeFilter(ChatType.PRIVATE), state='*')
    dp.register_message_handler(start_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.admin.menu, state='*')
    dp.register_message_handler(start_cmd, Command('menu'), ChatTypeFilter(ChatType.PRIVATE), state='*')
    dp.register_message_handler(start_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.back, state='*')
