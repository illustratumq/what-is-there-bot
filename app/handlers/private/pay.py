from aiogram import Dispatcher
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import CallbackQuery, ChatType
from aiogram.utils.markdown import hide_link

from app.database.services.enums import OrderStatusEnum
from app.database.services.repos import DealRepo, PostRepo, UserRepo, CommissionRepo, OrderRepo
from app.fondy.api import FondyApiWrapper
from app.keyboards.inline.deal import to_bot_kb
from app.keyboards.inline.pay import confirm_pay_kb, pay_cb, pay_deal_kb


async def confirm_pay_deal(call: CallbackQuery, callback_data: dict, deal_db: DealRepo, post_db: PostRepo,
                           user_db: UserRepo, commission_db: CommissionRepo):
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    post = await post_db.get_post(deal.post_id)
    need_to_pay = deal.price - deal.payed
    user = await user_db.get_user(call.from_user.id)

    commission_package = await commission_db.get_commission(user.commission_id)
    commission = commission_package.deal_commission(deal)

    if callback_data['action'] == 'pay_from_balance':
        pay_method = '–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –≤—Å—é —Å—É–º—É –∑ –±–∞–ª–∞–Ω—Å—É'
    elif callback_data['action'] == 'pay_fully':
        pay_method = '—Å–ø–ª–∞—Ç–∏–≤—à–∏ –≤—Å—é —Å—É–º—É —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–∏—Å—Ç–µ–º—É'
    else:
        pay_method = '—Å–ø–∏—Å–∞–≤—à–∏ —á–∞—Å—Ç–∏–Ω—É –∑ –±–∞–ª–∞–Ω—Å—É –∞ —Ä–µ—à—Ç—É —Å–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–∏—Å—Ç–µ–º—É'
    text = (
        f'‚û°Ô∏è –í–∏ –±–∞–∂–∞—î—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —É–≥–æ–¥—É "{post.title}" —É —Ä–æ–∑–º—ñ—Ä—ñ {need_to_pay + commission} –≥—Ä–Ω,  '
        f'<b>{pay_method}</b>.\n\n –ë—É–¥—å-–ª–∞—Å–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è'
    )
    await call.message.edit_text(text, reply_markup=confirm_pay_kb(deal, callback_data['action']))


async def pay_from_fondy_cmd(call: CallbackQuery, callback_data: dict, deal_db: DealRepo, post_db: PostRepo,
                             user_db: UserRepo, commission_db: CommissionRepo, fondy: FondyApiWrapper,
                             order_db: OrderRepo):
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    customer = await user_db.get_user(deal.customer_id)
    order = await order_db.get_order_deal(deal.deal_id)
    need_to_pay = deal.price - deal.payed
    commission_package = await commission_db.get_commission(customer.commission_id)
    commission = commission_package.deal_commission(deal)
    pay_from_balance = False

    if callback_data['action'] == 'conf_pay_partially':
        if 0 < customer.balance < need_to_pay + commission:
            need_to_pay -= customer.balance
            pay_from_balance = customer.balance
            await user_db.update_user(customer.user_id, balance=0)
        else:
            await call.answer('–£–ø—Å, –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –≤–∂–µ –±—ñ–ª—å—à–µ –∫–æ—à—Ç—ñ–≤, –Ω—ñ–∂ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–æ—ó –æ–ø–ª–∞—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É.'
                              '–ë—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞–∑–∞–¥ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ —â–µ —Ä–∞–∑.', show_alert=True)
            return
    if order and order.status == OrderStatusEnum.PROCESSING and order.url:
        url = order.url
    else:
        response, order = await fondy.create_order(deal, user_db, post_db, order_db, need_to_pay + commission)
        if response['response']['response_status'] != 'success':
            await call.message.answer(response)
            return
        url = response['response']['checkout_url']
        await order_db.update_order(order.id, status=OrderStatusEnum.PROCESSING, url=url)
        if pay_from_balance:
            body = order.body
            body.update(pay_from_balance=pay_from_balance)
            await order_db.update_order(order.id, body=body)
    await call.message.delete()
    await call.message.answer(f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å —É–≥–æ–¥—É –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É {hide_link(url)}',
                              reply_markup=to_bot_kb(url=url, text='–û–ø–ª–∞—Ç–∏—Ç–∏'))

async def pay_from_balance_cmd(call: CallbackQuery, callback_data: dict, deal_db: DealRepo, post_db: PostRepo,
                               user_db: UserRepo, commission_db: CommissionRepo):
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    need_to_pay = deal.price - deal.payed
    customer = await user_db.get_user(deal.customer_id)
    commission_package = await commission_db.get_commission(customer.commission_id)
    commission = commission_package.deal_commission(deal)
    if customer.balance < need_to_pay:
        await call.answer('–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –±—Ä–∞–∫—É—î –∫–æ—à—Ç—ñ–≤', show_alert=True)
        return
    await call.message.delete()
    post = await post_db.get_post(deal.post_id)
    executor = await user_db.get_user(deal.executor_id)
    await user_db.update_user(deal.customer_id, balance=customer.balance - need_to_pay - commission)
    await deal_db.update_deal(deal.deal_id, payed=deal.payed + need_to_pay, commission=deal.commission + commission)
    text_to_chat = (
        f'üîî –£–≥–æ–¥–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ —Å–ø–ª–∞—á–µ–Ω–∞, –∫–æ—à—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ —Å–µ—Ä–≤—ñ—Å—É. '
        f'{executor.create_html_link("–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å")} –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç–∏ –¥–æ —Ä–æ–±–æ—Ç–∏!'
    )
    text_to_executor = (
        f'üîî –ó–∞–º–æ–≤–Ω–∏–∫ –æ–ø–ª–∞—Ç–∏–≤ —É–≥–æ–¥—É "{post.title}", –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç–∏ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.'
    )
    text_to_customer = (
        f'‚úÖ –£–≥–æ–¥–∞ —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞. –ó –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —Å–ø–∏—Å–∞–Ω–æ {need_to_pay + commission} –≥—Ä–Ω.'
    )
    await call.message.answer(text_to_customer)
    await call.bot.send_message(deal.executor_id, text_to_executor)
    await call.bot.send_message(deal.chat_id, text_to_chat)


async def back_to_pay_method(call: CallbackQuery, callback_data: dict, deal_db: DealRepo, user_db: UserRepo,
                             post_db: PostRepo, commission_db: CommissionRepo):
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    customer = await user_db.get_user(deal.customer_id)
    post = await post_db.get_post(deal.post_id)
    await call.message.delete()
    need_to_pay = deal.price - deal.payed
    commission_package = await commission_db.get_commission(customer.commission_id)
    commission = commission_package.deal_commission(deal)
    text = (
        f'–í–∏ –±–∞–∂–∞—î—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —É–≥–æ–¥—É "{post.title}".\n\n'
        f'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ {deal.price} –≥—Ä–Ω., –∑ –Ω–µ—ó —Å–ø–ª–∞—á–µ–Ω–æ {deal.payed} –≥—Ä–Ω.\n'
        f'üëâ –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–ø–ª–∞—Ç–∏—Ç–∏ {need_to_pay} –≥—Ä–Ω + {commission} –≥—Ä–Ω –∫–æ–º—ñ—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É.\n\n'
    )
    if customer.balance > 0 and customer.balance >= need_to_pay + commission:
        text += (
            f'‚û°Ô∏è –ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É {customer.balance} –≥—Ä–Ω. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ—à—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ. '
            f'–ê–±–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤—Å—é —Å—É–º—É —É–≥–æ–¥–∏ –æ–∫—Ä–µ–º–∏–º –ø–ª–∞—Ç–µ–∂–µ–º.\n\n–ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏.'
        )
        reply_markup = pay_deal_kb(deal, balance=True)
    elif 0 < customer.balance < need_to_pay + commission:
        text += (
            f'‚û°Ô∏è –ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É {customer.balance} –≥—Ä–Ω. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –∫–æ—à—Ç—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å—É, '
            f'—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ —Ä–µ—à—Ç—É —É —Ä–æ–∑–º—ñ—Ä—ñ {need_to_pay + commission - customer.balance} –≥—Ä–Ω. '
            f'–ê–±–æ –∂ –æ–ø–ª–∞—Ç–∏—Ç–∏ –≤—Å—é —Å—É–º—É —É–≥–æ–¥–∏ –æ–∫—Ä–µ–º–∏–º –ø–ª–∞—Ç–µ–∂–µ–º.\n\n'
            f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏.'
        )
        reply_markup = pay_deal_kb(deal, partially=True)
    else:
        text += (
            f'–ë—É–¥—å-–ª–∞—Å–∫–∞ —Å–ø–ª–∞—Ç—ñ—Ç—å —É–≥–æ–¥—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.'
        )
        reply_markup = pay_deal_kb(deal)

    await call.message.answer(text, reply_markup=reply_markup)


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(
        confirm_pay_deal, ChatTypeFilter(ChatType.PRIVATE),
        pay_cb.filter(action=['pay_from_balance', 'pay_fully', 'pay_partially']), state='*'),
    dp.register_callback_query_handler(
        pay_from_fondy_cmd, ChatTypeFilter(ChatType.PRIVATE),
        pay_cb.filter(action=['conf_pay_fully', 'conf_pay_partially']), state='*')
    dp.register_callback_query_handler(
        back_to_pay_method, ChatTypeFilter(ChatType.PRIVATE), pay_cb.filter(action='cancel_pay'), state='*')
    dp.register_callback_query_handler(
        pay_from_balance_cmd, ChatTypeFilter(ChatType.PRIVATE), pay_cb.filter(action='conf_pay_from_balance'),
        state='*')