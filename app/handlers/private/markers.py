from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import Message, ChatType

from app.database.services.repos import MarkerRepo, UserRepo
from app.keyboards.reply.menu import basic_kb, Buttons
from app.states.states import MarkerSG, UserTimeSG


async def markers_cmd(msg: Message):
    text = (
        '<b>–Ø–∫ –ø—Ä–∞—Ü—é—é—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è?</b>\n\n'
        '–î–æ–¥–∞–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫. –ü—ñ—Å–ª—è –ø–æ—è–≤–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞, '
        '–±–æ—Ç —à—É–∫–∞—î –∑–±—ñ–≥–∏ —É –Ω–∞–∑–≤—ñ —ñ–∑ –≤–∞—à–∏–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏. –£ —Ä–∞–∑—ñ, —è–∫—â–æ —Ç–∞–∫—ñ —î, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n'
        f'<b>{Buttons.menu.markers}</b> ‚Äî –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∂–∞–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫.\n'
        f'<b>{Buttons.menu.work_times}</b> ‚Äî –≤–∫–∞–∑–∞—Ç–∏ —Ä–æ–±–æ—á–∏–π —á–∞—Å. '
        f'–£ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –±–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑—ñ –∑–≤—É–∫–æ–º. –í —Ä–µ—à—Ç—É —á–∞—Å—É ‚Äî –±–µ–∑–∑–≤—É—á–Ω–æ.\n\n'
    )
    reply_markup = basic_kb(([Buttons.menu.markers, Buttons.menu.work_times], [Buttons.menu.back]))
    await msg.answer(text, reply_markup=reply_markup)


async def moderate_markers_cmd(msg: Message, marker_db: MarkerRepo):
    text = (
        '–î–æ–¥–∞–π—Ç–µ –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ\n\n'
    )
    markers = await marker_db.get_markers_user(msg.from_user.id)
    if markers:
        markers_html = ', '.join([f'<code>{m.text}</code>' for m in markers])
        text += f'–í–∞—à—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {markers_html}'
    else:
        text += '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫ üòê'
    await msg.answer(text, reply_markup=basic_kb(([Buttons.menu.new_marker, Buttons.menu.del_marker], [Buttons.menu.to_markers])))


async def save_marker_cmd(msg: Message, marker_db: MarkerRepo, state: FSMContext):
    marker_text = msg.text.lower()
    markers = await marker_db.get_markers_user(msg.from_user.id)
    if len(marker_text) > 20:
        await msg.reply(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ 20 –ª—ñ—Ç–µ—Ä (–∑–∞–º—ñ—Å—Ç—å {len(marker_text)} –ª—ñ—Ç–µ—Ä)',
                        reply_markup=basic_kb([Buttons.menu.back]))
    elif len(markers) == 10:
        await msg.answer('–í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥–ø–∏—Å–æ–∫ üòê')
        await state.finish()
        await markers_cmd(msg)
    elif marker_text in [m.text for m in markers]:
        await msg.answer('–¢–∞–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î', reply_markup=basic_kb([Buttons.menu.to_markers]))
    else:
        await msg.delete()
        await marker_db.add(user_id=msg.from_user.id, text=marker_text)
        reply_markup = basic_kb(([Buttons.menu.new_marker, Buttons.menu.del_marker],
                                 [Buttons.menu.to_markers]))
        await msg.answer('–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ üòé', reply_markup=reply_markup)
        await moderate_markers_cmd(msg, marker_db)
        await state.finish()


async def add_marker_cmd(msg: Message):
    await msg.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ 20 –ª—ñ—Ç–µ—Ä.')
    await MarkerSG.Add.set()


async def input_marker_delete(msg: Message):
    await msg.answer('–ù–∞–¥—ñ–ª—à—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏')
    await MarkerSG.Delete.set()


async def delete_marker_cmd(msg: Message, marker_db: MarkerRepo, state: FSMContext):
    marker_text = msg.text
    marker = await marker_db.get_marker_text(msg.from_user.id, marker_text)
    if not marker:
        await msg.answer('–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑', reply_markup=basic_kb([Buttons.menu.to_markers]))
    else:
        await msg.delete()
        await msg.answer('–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞')
        await marker_db.delete_marker(msg.from_user.id, marker_text)
        await moderate_markers_cmd(msg, marker_db)
        await state.finish()


async def set_marker_time(msg: Message):
    await msg.answer('–í–∫–∞–∂—ñ—Ç—å —á–∞—Å –∫–æ–ª–∏ –≤–∞–º –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì-–ì–ì, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 08-18',
                     reply_markup=basic_kb([Buttons.menu.to_markers]))
    await UserTimeSG.Input.set()


async def save_marker_time(msg: Message, user_db: UserRepo, state: FSMContext):
    try:
        start, end = msg.text.split('-')
        if int(end) < int(start):
            await msg.answer('–ì–æ–¥–∏–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω—ñ –≤—ñ–¥ –º–µ–Ω—à–æ—ó –¥–æ –±—ñ–ª—å—à–æ—ó, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
            return
        await user_db.update_user(msg.from_user.id, time=f'{int(start)}-{int(end)}')
        await msg.answer('–ì–æ–¥–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ')
        await markers_cmd(msg)
        await state.finish()
    except:
        await msg.answer('–£–ø—Å, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')


def setup(dp: Dispatcher):
    dp.register_message_handler(
        markers_cmd, ChatTypeFilter(ChatType.PRIVATE), text=[Buttons.menu.notifications, Buttons.menu.to_markers],
        state='*')
    dp.register_message_handler(
        moderate_markers_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.markers, state='*')
    dp.register_message_handler(
        add_marker_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.new_marker, state='*')
    dp.register_message_handler(save_marker_cmd, ChatTypeFilter(ChatType.PRIVATE), state=MarkerSG.Add)
    dp.register_message_handler(
        input_marker_delete, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.del_marker, state='*')
    dp.register_message_handler(delete_marker_cmd, ChatTypeFilter(ChatType.PRIVATE), state=MarkerSG.Delete)
    dp.register_message_handler(set_marker_time, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.work_times)
    dp.register_message_handler(save_marker_time, ChatTypeFilter(ChatType.PRIVATE), state=UserTimeSG.Input)