from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import Message, ChatType, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, \
    CallbackQuery

from app.config import Config
from app.database.services.repos import UserRepo, DealRepo
from app.keyboards import Buttons
from app.keyboards.inline.moderate import comment_deals_kb
from app.keyboards.reply.menu import basic_kb
from app.states.states import UserAboutSG
from app.handlers.private.participate import is_valid_comment

async def my_rating_cmd(msg: Message, user_db: UserRepo, deal_db: DealRepo):
    user = await user_db.get_user(msg.chat.id)
    await msg.answer(await user.construct_my_rating(deal_db),
                     reply_markup=comment_deals_kb())

async def add_user_about(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    text = (
        '–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø—Ä–æ —Å–µ–±–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤)'
    )
    last_msg = await call.message.answer(text, reply_markup=basic_kb([Buttons.menu.back]))
    await state.update_data(last_msg_id=last_msg.message_id)
    await UserAboutSG.Input.set()


async def save_user_about(msg: Message, user_db: UserRepo, deal_db: DealRepo, state: FSMContext, config: Config):
    data = await state.get_data()
    if 'last_msg_id' in data.keys():
        try:
            await msg.bot.delete_message(msg.from_user.id, data['last_msg_id'])
        except:
            pass
    await msg.delete()
    user_about = msg.html_text
    if len(user_about) > 500:
        error_text = (
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫-—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ 500, –∑–∞–º—ñ—Å—Ç—å {len(user_about)}, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑'
        )
        await msg.answer(error_text)
        return
    valid_about = is_valid_comment(user_about)['status']
    if valid_about == 'not valid':
        await msg.answer('–¢–≤—ñ–π –æ–ø–∏—Å –±—É–ª–æ  –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –û—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ —Ç–µ–≥–∏. '
                         '–¢–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É.')
        return
    elif valid_about == 'suspiciously':
        warning = (
            f'üî¥ #–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π–í–∏—Å–ª—ñ–≤\n\n'
            f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {msg.from_user.get_mention()} ({msg.from_user.id}) '
            f'–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –≤–∏—Ä–∞–∑ –≤ —Å–≤–æ—î–º—É –æ–ø–∏—Å—ñ\n\n'
            f'<i>{msg.text}</i>'
        )
        await msg.bot.send_message(
            config.misc.admin_channel_id, warning)
    await user_db.update_user(msg.from_user.id, description=user_about)
    await my_rating_cmd(msg, user_db, deal_db)


async def user_comments_list(query: InlineQuery, deal_db: DealRepo, user_db: UserRepo):
    results = []
    deals = await deal_db.get_comment_deals(query.from_user.id)
    if not deals:
        results.append(
            InlineQueryResultArticle(
                id='unknown',
                title=f'–í—ñ–¥–≥—É–∫–∏ –ø—Ä–æ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ',
                input_message_content=InputTextMessageContent('–ù–∞–∂–∞–ª—å —É —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤'),
            )
        )
    else:
        for deal in deals:
            customer = await user_db.get_user(deal.customer_id)
            comment = f' {deal.comment}' if deal.comment else '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'
            text = (
                f'{customer.emojize_rating_text(deal.rating)} –≤—ñ–¥ {customer.full_name}\n'
                f'{deal.updated_at.strftime("%d.%m.%Y")} {comment}'
            )
            results.append(
                InlineQueryResultArticle(
                    id=deal.deal_id,
                    title=f'{customer.emojize_rating_text(deal.rating)} –≤—ñ–¥ {customer.full_name}',
                    description=f'{deal.updated_at.strftime("%d.%m.%Y")} {comment}',
                    input_message_content=InputTextMessageContent(text),
                )
            )

    await query.answer(results, is_personal=True, cache_time=5)


def setup(dp: Dispatcher):
    dp.register_inline_handler(user_comments_list, text='–í—ñ–¥–≥—É–∫–∏', state='*')
    dp.register_callback_query_handler(add_user_about, text='edit_about', state='*')
    dp.register_message_handler(my_rating_cmd, ChatTypeFilter(ChatType.PRIVATE),
                                text=Buttons.menu.my_rating, state='*')
    dp.register_message_handler(save_user_about, ChatTypeFilter(ChatType.PRIVATE), state=UserAboutSG.Input)