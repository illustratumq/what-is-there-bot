import re

from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import Message, ChatType, CallbackQuery

from app.config import Config
from app.database.services.enums import DealStatusEnum, OrderTypeEnum
from app.database.services.repos import UserRepo, OrderRepo, DealRepo, MerchantRepo
from app.fondy.new_api import FondyApiWrapper
from app.keyboards import Buttons
from app.keyboards.inline.pay import payout_kb, payout_cb, card_confirm_kb
from app.keyboards.reply.menu import basic_kb


def is_valid_credit_card(card_number):
    pattern = re.compile(r'^[4-6]\d{3}-?\d{4}-?\d{4}-?\d{4}$')
    if re.match(pattern, card_number):
        return True
    else:
        return False

async def my_balance_cmd(msg: Message, order_db: OrderRepo, deal_db: DealRepo,
                         user_db: UserRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    if not user.is_inn_exist():
        await msg.answer('–¢–≤—ñ–π –Ü–ü–ù(–†–ù–û–ö–ü–ü) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥—å –ª–∞—Å–∫–∞ –∑–∞–ø–æ–≤–Ω–∏ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üëá')
        await state.set_state(state='inn_set')
        return
    deals = await deal_db.get_deal_executor(msg.from_user.id, DealStatusEnum.DONE)
    orders_to_pay = []
    cards = set()
    for deal in deals:
        orders = await order_db.get_orders_deal(deal.deal_id, OrderTypeEnum.ORDER)
        orders_done = await order_db.get_orders_deal(deal.deal_id, OrderTypeEnum.PAYOUT)
        for order in orders:
            if order.is_valid_response() and order.is_order_status('approved') and not order.payed:
                orders_to_pay.append(order)
        for order in orders_done:
            if order.is_valid_response() and order.is_order_status('approved'):
                cards.add(order.get_request_body['receiver_card_number'])
    if orders_to_pay:
        cards = list(cards)
        payout = round(sum([order.calculate_payout() for order in orders_to_pay]) / 100, 1)
        text = f'–¢–æ–±—ñ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—É–º–∞ –¥–æ –≤–∏–ø–ª–∞—Ç–∏ {payout} –≥—Ä–Ω'
        if cards:
            text += '\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏ üëá'
            await msg.answer(text, reply_markup=payout_kb(cards, msg.from_user.id))
        else:
            await msg.answer(text + '\n\n–í–∫–∞–∂–∏ –∫–∞—Ä—Ç—É, –Ω–∞ —è–∫—É –∑–∞—Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ—à—Ç–∏ üëá',
                            reply_markup=basic_kb([Buttons.menu.back]))
            await state.set_state(state='card_input')
    else:
        await msg.answer('–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–∫—É –Ω–µ–º–∞—î –∫–æ—à—Ç—ñ–≤')

async def save_card(msg: Message, state: FSMContext):
    card_number = msg.text.replace(' ', '').strip()
    if not is_valid_credit_card(card_number):
        await msg.answer('–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏, –ø–µ—Ä–µ–≤—ñ—Ä –±—É–¥—å –ª–∞—Å–∫–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
        return
    else:
        await msg.answer('–¢–∏ –±–∞–∂–∞—î—à –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É –∑–∞ –¥–∞–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç–∏?',
                         reply_markup=card_confirm_kb(card_number, msg.from_user.id))
        await state.finish()

async def add_new_card_to_payout(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í–∫–∞–∂—ñ—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —è–∫—É –∑–∞—Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ—à—Ç–∏ üëá')
    await state.set_state(state='card_input')

async def save_card_and_make_payout(upd: Message | CallbackQuery, state: FSMContext, fondy: FondyApiWrapper,
                                    deal_db: DealRepo, order_db: OrderRepo, merchant_db: MerchantRepo,
                                    callback_data: dict = None):
    user_id = upd.from_user.id
    if isinstance(upd, Message):
        msg = upd
        card_number = msg.text.replace(' ', '').strip()
    else:
        card_number = callback_data['card']
        msg = upd.message
    await msg.delete()
    deals = await deal_db.get_deal_executor(user_id, DealStatusEnum.DONE)
    orders_to_pay = {}
    for deal in deals:
        orders = await order_db.get_orders_deal(deal.deal_id, OrderTypeEnum.ORDER)
        for order in orders:
            if order.is_valid_response() and order.is_order_status('approved') and not order.payed:
                if order.merchant_id in orders_to_pay.keys():
                    if order.deal_id in orders_to_pay[order.merchant_id].keys():
                        orders_to_pay.update({order.merchant_id:
                                                  {order.deal_id: orders_to_pay[order.merchant_id][order.deal_id] + [order]}
                        })
                    else:
                        orders_to_pay.update({order.merchant_id:
                                                  {order.deal_id: [order]}
                                              })
                else:
                    orders_to_pay.update({order.merchant_id: {order.deal_id: [order]}})
    for merchant in orders_to_pay.keys():
        orders = orders_to_pay.get(merchant)
        for deal in orders.keys():
            merchant = await merchant_db.get_merchant(merchant)
            deal = await deal_db.get_deal(deal)
            price_sum = []
            for order in orders_to_pay[merchant.merchant_id][deal.deal_id]:
                price_sum.append(order.calculate_payout())
                await order_db.update_order(order.id, payed=True)
                await order_db.create_log(order.id, '–°–ø—Ä–æ–±–∞ –≤–∏–ø–ª–∞—Ç–∏—Ç–∏ –∫–æ—à—Ç–∏')
            price_sum = sum(price_sum)
            result, order_payout, error_message = await make_payout(
                fondy,
                dict(deal=deal, merchant=merchant, card_number=card_number, amount=price_sum),
                msg.bot
            )
            await order_db.create_log(order_payout.id,
                                      f'–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–ª–∞—Ç—ñ–∂ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É —Å—É–º–∏ {round(price_sum/100, 2)} –≥—Ä–Ω.')
            if result:
                await msg.answer('–í–∏–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤')
                # await order_db.update_order(order_payout.id, )
                for order in orders_to_pay[merchant.merchant_id][deal.deal_id]:
                    await order_db.create_log(order.id,
                                              f'–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø–ª–∞—á–µ–Ω–æ, ID –ø–ª–∞—Ç—ñ–∂—É –≤–∏–ø–ª–∞—Ç–∏={order_payout.id}')
            else:
                await msg.answer('ü´§ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤–∏–ø–ª–∞—Ç–æ—é –∫–æ—à—Ç—ñ–≤. –ó\'—è—Å–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É\n\n–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @ENTER_help')
                for order in orders_to_pay[merchant.merchant_id][deal.deal_id]:
                    await order_db.update_order(order.id, payed=False)
                    await order_db.create_log(order.id, f'–ù–µ–≤–¥–∞–ª–∞ —Å–ø—Ä–æ–±–∞ –≤–∏–ø–ª–∞—Ç–∏ –∫–æ—à—Ç—ñ–≤: {error_message}')

    await state.finish()

async def make_payout(fondy: FondyApiWrapper, payout_data: dict, bot: Bot):
    response, order = await fondy.payout_order(**payout_data)
    if 'error_message' in response['response'].keys():
        config = Config.from_env()
        await bot.send_message(config.misc.admin_help_channel_id,
                               f'üî¥üí≥ –ù–µ –≤–¥–∞–ª–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏ <b>payout</b>\n\n{order.id=}\n\n'
                               f'<code>{order.request_answer}</code>')
        return False, order, order.request_answer['response']['error_message']
    elif response['response']['order_status'] in ['approved', 'processing']:
        return True, order, None

async def input_inn_cmd(msg: Message, user_db: UserRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    if user.inn:
        await msg.answer(f'–¢–≤—ñ–π –Ü–ü–ù: {user.inn}',
                         reply_markup=basic_kb([Buttons.menu.to_payout]))
    else:
        await msg.answer(
            '–¢–≤—ñ–π –Ü–ü–ù –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥—å –ª–∞—Å–∫–∞ –∑–∞–ø–æ–≤–Ω–∏ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üëá',
            reply_markup=basic_kb([Buttons.menu.to_payout])
        )
        await state.set_state(state='inn_set')


async def save_user_inn(msg: Message, user_db: UserRepo, state: FSMContext):
    inn = msg.text.strip()
    if inn.isalnum():
        if len(inn) != 10:
            await msg.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 10, –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏ —Å–ø—Ä–æ–±—É')
        else:
            inn = int(inn)
            await user_db.update_user(msg.from_user.id, inn=inn)
            await msg.answer('–¢–≤—ñ–π –Ü–ü–ù —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!',
                             reply_markup=basic_kb([Buttons.menu.to_payout]))
            await state.finish()
    else:
        await msg.answer('–Ü–ü–ù –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏ —Å–ø—Ä–æ–±—É')


def setup(dp: Dispatcher):
    dp.register_message_handler(my_balance_cmd, ChatTypeFilter(ChatType.PRIVATE),
                                text=[Buttons.menu.my_money, Buttons.menu.to_payout], state='*')
    dp.register_message_handler(
        input_inn_cmd, ChatTypeFilter(ChatType.PRIVATE), text=Buttons.menu.inn, state='*')
    dp.register_callback_query_handler(add_new_card_to_payout, payout_cb.filter(action='add_new_card'),
                                       state='*')
    dp.register_message_handler(save_card, ChatTypeFilter(ChatType.PRIVATE), state='card_input')
    dp.register_message_handler(save_user_inn, ChatTypeFilter(ChatType.PRIVATE), state='inn_set')
    # dp.register_message_handler(save_card_and_make_payout, ChatTypeFilter(ChatType.PRIVATE), state='card_input')
    dp.register_callback_query_handler(save_card_and_make_payout, payout_cb.filter(action='payout'),
                                       state='*')

