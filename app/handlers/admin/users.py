from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from app.config import Config
from app.database.services.enums import UserStatusEnum
from app.database.services.repos import UserRepo, DealRepo, PostRepo, SettingRepo
from app.keyboards import Buttons
from app.keyboards.inline.admin import user_info_kb, user_search_cb, user_full_settings_kb
from app.keyboards.inline.back import back_kb
from app.keyboards.reply.menu import basic_kb


async def search_user_cmd(msg: Message, state: FSMContext, config: Config):
    admin_channel = await msg.bot.get_chat(config.misc.admin_channel_id)
    text = (
        '‚ÑπÔ∏è <b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –±—É–¥—å-—è–∫–∏–π –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –ø–æ—à—É–∫—É</b>:\n\n'
        '<pre>1) –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n'
        f'2) –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ—Å—Ç –∑ <a href="{admin_channel.invite_link}">–∞–¥–º—ñ–Ω –∫–∞–Ω–∞–ª—É</a>,'
        f'–≤ —è–∫–æ–º—É –±—Ä–∞–≤ —É—á–∞—Å—Ç—å —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n'
        '3) –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä (ID) —É–≥–æ–¥–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º, –≤ —è–∫—ñ–π –±—Ä–∞–≤ —É—á–∞—Å—Ç—å —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á\n'
        '4) –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤–Ω–µ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º—ñ–Ω—ñ–º—É–º 2 –ª—ñ—Ç–µ—Ä–∏)</pre>'
    )
    await msg.answer(text, reply_markup=basic_kb([Buttons.admin.to_admin]), disable_web_page_preview=True)
    await state.set_state(state='admin_search')


async def send_user_info(msg: Message, user: UserRepo.model):
    await msg.answer(f'–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.create_html_link(user.full_name)}',
                     reply_markup=user_info_kb(user))


async def detail_user_info(upd: CallbackQuery | Message, callback_data: dict, user_db: UserRepo, deal_db: DealRepo,
                           setting_db: SettingRepo, state: FSMContext):
    user = await user_db.get_user(int(callback_data['user_id']))
    status = {
        UserStatusEnum.ACTIVE: 'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π',
        UserStatusEnum.BANNED: 'üî¥ –ó–∞–±–∞–Ω–µ–Ω–∏–π'
    }
    text = (
        f'–ü–æ–≤–Ω–µ —ñ–º\'—è: {user.create_html_link(user.full_name)}\n'
        f'–¢–µ–ª–µ–≥—Ä–∞–ºID: <code>{user.user_id}</code>\n'
        f'–ë–∞–ª–∞–Ω—Å: {user.balance} –≥—Ä–Ω.\n'
        f'–°—Ç–∞—Ç—É—Å: {status[user.status]}\n'
    )
    deals_executor = await deal_db.get_deal_executor(user.user_id, '*')
    deals_customer = await deal_db.get_deal_customer(user.user_id, '*')
    rating = (await deal_db.calculate_user_rating(user.user_id))[0]
    setting = await setting_db.get_setting(user.user_id)

    text += (
        '\n–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:\n\n'
        f'–†–µ–π—Ç–∏–Ω–≥: {rating} {user.emojize_rating_text(rating)}\n'
        f'–í —Ä–æ–ª—ñ –∑–∞–º–æ–≤–Ω–∏–∫–∞: {len(deals_customer)} —É–≥–æ–¥\n'
        f'–í —Ä–æ–ª—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: {len(deals_executor)} —É–≥–æ–¥\n\n'
    )
    if isinstance(upd, CallbackQuery):
        await upd.message.edit_text(text, reply_markup=user_full_settings_kb(setting, user))
    else:
        await upd.answer(text, reply_markup=user_full_settings_kb(setting, user))

async def search_user_database(msg: Message, user_db: UserRepo, deal_db: DealRepo,
                               post_db: PostRepo, state: FSMContext):
    if msg.forward_from:
        user = await user_db.get_user(msg.forward_from.id)
        if user:
            await send_user_info(msg, user)
            return
    elif msg.forward_from_message_id:
        post = await post_db.get_post_admin_channel(msg.forward_from_message_id)
        if post:
            deal = await deal_db.get_deal_post(post.post_id)
            if deal.customer_id and deal.executor_id:
                customer = await user_db.get_user(deal.customer_id)
                executor = await user_db.get_user(deal.executor_id)
                await send_user_info(msg, customer)
                await send_user_info(msg, executor)
                return
            else:
                user = await user_db.get_user(post.user_id)
                await send_user_info(msg, user)
                return
    else:
        if str(msg.text).isnumeric():
            deal = await deal_db.get_deal(int(msg.text))
            if deal:
                if deal.customer_id and deal.executor_id:
                    customer = await user_db.get_user(deal.customer_id)
                    executor = await user_db.get_user(deal.executor_id)
                    await send_user_info(msg, customer)
                    await send_user_info(msg, executor)
                    return
                else:
                    user = await user_db.get_user(deal.customer_id)
                    await send_user_info(msg, user)
                    return
        else:
            if len(msg.text) >= 2:
                users = []

                for user in await user_db.get_all():
                    msg_input = msg.text.lower().replace(f'#{user.user_id}', '')
                    if user.full_name.lower() == msg_input and msg.text[-1] != '+':
                        await send_user_info(msg, user)
                        await msg.answer(f'–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ñ–Ω—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–≤–µ–¥—ñ—Ç—å <code>{msg_input}+</code>')
                        return
                    if user.full_name.lower().replace('+', '').startswith(msg.text.lower()):
                        users.append(user)
                    elif msg.text.lower().replace('+', '') in user.full_name.lower():
                        users.append(user)
                if users:
                    text = f'–ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –∑–±—ñ–≥–æ–º "{msg.text}":\n\n'
                    for user, n in zip(users, range(len(users))):
                        text += f'{n+1}. <code>{user.full_name}#{user.user_id}</code>'
                    await msg.answer(text)
                    return
            else:
                await msg.answer('–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É')
                return
    await msg.answer('–ù–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ :(', reply_markup=basic_kb([Buttons.admin.to_admin]))


def setup(dp: Dispatcher):
    dp.register_message_handler(search_user_cmd, text=Buttons.admin.user, state='*')
    dp.register_message_handler(search_user_database, state='admin_search')
    dp.register_callback_query_handler(detail_user_info, user_search_cb.filter(), state='*')