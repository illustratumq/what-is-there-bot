import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import CallbackQuery, Message, ChatType
from aiogram.utils.deep_linking import get_start_link

from app.database.services.repos import DealRepo, UserRepo, PostRepo, CommissionRepo
from app.keyboards.inline.chat import room_cb, back_chat_kb, room_pay_kb
from app.keyboards.inline.deal import to_bot_kb
from app.keyboards.inline.pay import pay_deal_kb

NEW_PRICE_REGEX = re.compile(
    r'^\d{2,5}$'
)


async def edit_price_cmd(call: CallbackQuery, callback_data: dict, deal_db: DealRepo,
                         user_db: UserRepo, commission_db: CommissionRepo, state: FSMContext):
    await call.message.delete()
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    customer = await user_db.get_user(deal.customer_id)
    executor = await user_db.get_user(deal.executor_id)
    commission = await commission_db.get_commission(customer.commission_id)
    text = (
        f'–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É —É–≥–æ–¥–∏, {customer.full_name} —Ç–∞ '
        f'{executor.full_name} –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ. '
        f'–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ ‚Äî {commission.minimal} –≥—Ä–Ω.\n\n'
        f'‚Ñπ –í –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è, –∑ —è–∫–æ—é –í–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.'
    )
    await call.message.answer(text, disable_web_page_preview=True, reply_markup=back_chat_kb(deal))
    await state.storage.set_state(chat=call.message.chat.id, user=deal.customer_id, state='set_price')
    await state.storage.set_state(chat=call.message.chat.id, user=deal.executor_id, state='set_price')
    await state.storage.update_data(chat=call.message.chat.id, user=deal.customer_id, price=0)
    await state.storage.update_data(chat=call.message.chat.id, user=deal.executor_id, price=0)


async def handle_new_price(msg: Message, state: FSMContext, deal_db: DealRepo, user_db: UserRepo,
                           commission_db: CommissionRepo):
    new_price = int(msg.text)
    deal = await deal_db.get_deal_chat(msg.chat.id)
    customer = await user_db.get_user(deal.customer_id)
    commission = await commission_db.get_commission(customer.commission_id)
    if not commission.minimal <= new_price <= commission.maximal:
        text = (
            f'–ù–æ–≤–∞ —Ü—ñ–Ω–∞ —É–≥–æ–¥–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–æ—é –∑–∞ {commission.minimal} —Ç–∞ –Ω–µ –±—ñ–ª—å—à–æ—é –∑–∞ '
            f'{commission.maximal} –≥—Ä–Ω.'
        )
        await msg.reply(text, reply_markup=back_chat_kb(deal))
        return
    await state.storage.update_data(chat=msg.chat.id, user=msg.from_user.id, price=new_price)
    customer_data = await state.storage.get_data(chat=msg.chat.id, user=deal.customer_id)
    executor_data = await state.storage.get_data(chat=msg.chat.id, user=deal.executor_id)
    if customer_data['price'] == 0 or executor_data['price'] == 0:
        if customer_data['price'] == 0:
            user = await user_db.get_user(deal.customer_id)
        else:
            user = await user_db.get_user(deal.executor_id)
        await msg.answer(f'{user.mention}, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–∞–∫–µ –∂ —Å–∞–º–µ —á–∏—Å–ª–æ, '
                         f'—â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏.')
    elif customer_data['price'] == executor_data['price'] and customer_data['price'] != 0:
        customer = await user_db.get_user(deal.customer_id)
        await apply_new_price(msg, deal_db, deal, state, customer, new_price)
        return
    else:
        await msg.answer('–¶—ñ–Ω–∏ —è–∫—ñ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.')


async def apply_new_price(msg: Message, deal_db: DealRepo, deal: DealRepo.model,
                          state: FSMContext, customer: UserRepo.model, price: int):
    text = (
        f'üîî –¶—ñ–Ω–∞ —É–≥–æ–¥–∏ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {price} –≥—Ä–Ω.\n\n'
    )
    reply_markup = None
    if deal.payed == 0:
        text += (
            '–Ø–∫—â–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –æ–ø–ª–∞—Ç–∏ —É–≥–æ–¥–∏'
        )
        reply_markup = to_bot_kb(url=await get_start_link(f'pay_deal-{deal.deal_id}'))
    else:
        if price > deal.payed:
            text += (
                f'–¢–µ–ø–µ—Ä {customer.create_html_link(customer.full_name)} –ø–æ–≤–∏–Ω–µ–Ω –¥–æ–ø–ª–∞—Ç–∏—Ç–∏ '
                f'—Ä—ñ–∑–Ω–∏—Ü—é —É —Ä–æ–∑–º—ñ—Ä—ñ {price-deal.payed} –≥—Ä–Ω.'
            )
            reply_markup = room_pay_kb(deal)
        else:
            text += (
                f'–†—ñ–∑–Ω–∏—Ü—è —É —Ä–æ–∑–º—ñ—Ä—ñ {price - deal.payed} –≥—Ä–Ω. –±—É–¥–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ '
                f'{customer.create_html_link(customer.full_name)} –Ω–∞ –±–∞–ª–∞–Ω—Å.'
            )
    await msg.answer(text, reply_markup=reply_markup)
    await deal_db.update_deal(deal.deal_id, price=price)
    await state.storage.reset_data(chat=msg.chat.id, user=deal.executor_id)
    await state.storage.reset_data(chat=msg.chat.id, user=deal.customer_id)
    await deal.create_log(deal_db, f'–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞ —Ü—ñ–Ω–∞ {price} –≥—Ä–Ω.')


async def pay_deal_cmd(call: CallbackQuery, callback_data: dict, deal_db: DealRepo, user_db: UserRepo):
    deal_id = int(callback_data['deal_id'])
    deal = await deal_db.get_deal(deal_id)
    if call.from_user.id == deal.executor_id:
        text = (
            '–¶—è –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ó–∞–º–æ–≤–Ω–∏–∫—É. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, —â–æ–± –ó–∞–º–æ–≤–Ω–∏–∫ '
            '–æ–ø–ª–∞—Ç–∏–≤ —É–≥–æ–¥—É, –Ω–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ —Ü–µ –≤ —á–∞—Ç—ñ.'
        )
        await call.answer(text, show_alert=True)
        return
    if deal.price == 0:
        await call.answer('–¶—ñ–Ω–∞ —É–≥–æ–¥–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞', show_alert=True)
        return
    elif deal.payed >= deal.price:
        await call.answer('–£–≥–æ–¥–∞ –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ üëå', show_alert=True)
        return
    await call.answer()
    customer = await user_db.get_user(deal.customer_id)
    executor = await user_db.get_user(deal.executor_id)
    text = (
        f'{customer.create_html_link(customer.full_name)} –æ–ø–ª–∞—á—É—î —É–≥–æ–¥—É –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∑ –±–æ—Ç–æ–º.\n\n'
        f'{executor.create_html_link(executor.full_name)} –Ω–µ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ —Ä–æ–±–æ—Ç–∏, –ø–æ–∫–∏ –Ω–µ –ø–æ–±–∞—á–∏—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ '
        f'–±–æ—Ç–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É —É–≥–æ–¥–∏.'
    )
    await call.message.delete()
    await call.bot.send_message(deal.chat_id, text,
                                reply_markup=to_bot_kb(await get_start_link(f'pay_deal-{deal.deal_id}')))

def setup(dp: Dispatcher):
    dp.register_callback_query_handler(
        edit_price_cmd, ChatTypeFilter(ChatType.GROUP), room_cb.filter(action='price'), state='*'
    )
    dp.register_message_handler(
        handle_new_price, ChatTypeFilter(ChatType.GROUP), regexp=NEW_PRICE_REGEX, state='set_price'
    )
    dp.register_callback_query_handler(
        pay_deal_cmd, ChatTypeFilter(ChatType.GROUP), room_cb.filter(action='pay'), state='*'
    )